package org.apache.xalan.xsltc.dom;

import java.util.Vector;
import java.util.StringTokenizer;

import org.apache.xalan.xsltc.DOM;
import org.apache.xalan.xsltc.NodeIterator;
import org.apache.xalan.xsltc.runtime.Hashtable;

public class KeyIndex implements NodeIterator {

    private Hashtable _index = new Hashtable();
    private BitArray  _nodes = null;
    private int       _pos = 0;
    private int       _mark = 0;
    private int       _save = 0;
    private int       _start = 0;
    private int       _arraySize = 0;
    private int       _node = -1;

    /**
     * Creates an index for a key defined by xsl:key
     */
    public KeyIndex(int size) {
	_arraySize = size;
    }

    public void setRestartable(boolean flag) {
	    
    }
 
    /**
     * Adds a node to the node list for a given value.
     * The BitArray object makes sure duplicate nodes are eliminated.
     */
    public void add(Object value, int node) {
	if ((_nodes = (BitArray)_index.get(value)) == null) {
	    _nodes = new BitArray(_arraySize);
	    _nodes.setMask(node & 0xff000000);
	    _index.put(value,_nodes);
	}
	_nodes.setBit(node & 0x00ffffff);

	/*
	 * TODO: A bit array can currently only hold nodes from one DOM.
	 * An index will therefore only return nodes from a single document.
	 */
    }

    /**
     * Merge this node set with nodes from another index
     */
    public void merge(KeyIndex other) {
	if (other != null) {
	    if (other._nodes != null) {
		if (_nodes == null)
		    _nodes = other._nodes;
		else
		    _nodes = _nodes.merge(other._nodes);
	    }
	}
    }

    /**
     * This method must be called by the code generated by the id() function
     * prior to returning the node iterator. The lookup code for key() and
     * id() differ in the way the lookup value can be whitespace separated
     * list of tokens for the id() function, but a single string for the
     * key() function.
     */
    public void lookupId(Object value) {
	if (value instanceof String) {
	    final String string = (String)value;
	    if (string.indexOf(' ') > -1) {
		StringTokenizer values = new StringTokenizer(string);
		while (values.hasMoreElements()) {
		    BitArray nodes = (BitArray)_index.get(values.nextElement());
		    if (nodes != null) {
			if (_nodes == null)
			    _nodes = nodes;
			else
			    _nodes = _nodes.merge(nodes);
		    }
		}
		return;
	    }
	}
	_nodes = (BitArray)_index.get(value);
    }

    /**
     * This method must be called by the code generated by the key() function
     * prior to returning the node iterator.
     */
    public void lookupKey(Object value) {
	_nodes = (BitArray)_index.get(value);
    }

    /** 
     * Callers should not call next() after it returns END.
     */
    public int next() {
	if (_nodes == null) return(END);
	if ((_node = _nodes.getNextBit(++_node)) == END) return(END);
	_pos++;
	return(_node | _nodes.getMask());
    }

    public int containsID(int node, Object value) { 
	if (value instanceof String) {
	    final String string = (String)value;
	    if (string.indexOf(' ') > -1) {
		StringTokenizer values = new StringTokenizer(string);
		while (values.hasMoreElements()) {
		    BitArray nodes = (BitArray)_index.get(values.nextElement());
		    if ((nodes != null) && (nodes.getBit(node))) return(1);
		}
		return(0);
	    }
	}

	BitArray nodes = (BitArray)_index.get(value);
	if ((nodes != null) && (nodes.getBit(node))) return(1);
	return(0);
    }

    public int containsKey(int node, Object value) { 
	BitArray nodes = (BitArray)_index.get(value);
	if ((nodes != null) && (nodes.getBit(node))) return(1);
	return(0);
    }

    /**
     * Resets the iterator to the last start node.
     */
    public NodeIterator reset() {
	_pos = _start;
	_node = _start - 1;
	return(this);
    }

    /**
     * Returns the number of elements in this iterator.
     */
    public int getLast() {
	if (_nodes == null)
	    return(0);
	else
    }

    /**
     * Returns the position of the current node in the set.
     */
    public int getPosition() {
	return(_pos);
    }

    /**
     * Remembers the current node for the next call to gotoMark().
     */
    public void setMark() {
	_mark = _pos;
	_save = _node;
    }

    /**
     * Restores the current node remembered by setMark().
     */
    public void gotoMark() {
	_pos = _mark;
	_node = _save;
    }

    /** 
     * Set start to END should 'close' the iterator, 
     * i.e. subsequent call to next() should return END.
     */
    public NodeIterator setStartNode(int start) {
	if (start == END) {
	    _nodes = null;
	}
	else if (_nodes != null) {
	    _start = _nodes.getBitNumber(start-1); 
	    _node = _start - 1;
	}
	return((NodeIterator)this);
    }

    /**
     * True if this iterator has a reversed axis.
     */
    public boolean isReverse() {
	return(false);
    }

    /**
     * Returns a deep copy of this iterator.
     */
    public NodeIterator cloneIterator() {
	KeyIndex other = new KeyIndex(_arraySize);

	other._index = _index;
	other._nodes = _nodes.cloneArray();
	other._pos   = _pos;
	other._start = _start;
	other._node  = _node;

	return(other);
    }

}
